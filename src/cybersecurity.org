#+TITLE: Cybersecurity

* Web
** Injection
*** SQL Injection

**** List of location for possible SQL Injection

There a several location for SQL Injection.

***** Arguments in URLs

Arguments in URLs might be used to fetch informations from a database. If the SQL request is not filtered, it may be possible to exploit them. In the following url, the two arguments =action= and =news_id= might be injectable.

#+BEGIN_EXAMPLE
http://example.com/?action=news&news_id=12
#+END_EXAMPLE

For example, if =news_id= is injectable, this could be a valid payload :

#+BEGIN_EXAMPLE
http://example.com/?action=news&news_id=12 union select 1, 2, 3 from users;-- -
#+END_EXAMPLE

***** Forms

**** Detect a SQL Injection

**** Bypass using GBK

GBK is a character encoding format for chinese chars. If this encoding is enabled, it is possible to bypass php mysqsl =addslashes= filters.

Indeed, with this function every single quote is escaped using an anti-slash. But if we add =%bf= before the simple quote, the anti-slash is caught by this caracter and the simple quote become a valid character.

Example: =aaa' OR 1 = 1-- -= become =aaa\' OR 1 = 1-- -=; but =aaa%BF' OR 1 = 1-- -= become =aaa%BF\' OR 1 = 1-- -= and =%BF\= is one character.

Reference: https://hydrasky.com/network-security/sql-injection-bypass-php-addslashs-function/

** File Inclusion

A File Inclusion is a type a vulnerability where an attacker can read a file on the server.

*** Detect a File Inclusion

A famous location is in websites where pages or languages are processed with urls looking like this :

#+BEGIN_EXAMPLE
https://www.example.com/?lang=en
https://www.example.com/?page=home
#+END_EXAMPLE

It is probable that in the backend, the PHP code try to include files by appending a =.php= extension.

To detect if these parameters are vulnerables to file inclusion, add a null byte =%00= at the end of the arguments :

#+BEGIN_EXAMPLE
https://www.example.com/?lang=en%00
https://www.example.com/?page=home%00
#+END_EXAMPLE

If the web site crash or if there is an error message explaining that an include failed, it is likely that the website is vulnerable to file inclusion.

*** PHP Filters :PHP:

In an =include= statement, PHP can process several filters. To use them, the argument must begin with =<FILTER-TYPE>://=.

With the *data* filter, it is possible to include a string either directly, or as a result of a php function.

#+BEGIN_EXAMPLE
data://text/plain;base64,<BASE64-ENCODED-STRING>
#+END_EXAMPLE

Example of payloads

| Command                        | Base64                                                            |
|--------------------------------+-------------------------------------------------------------------|
| <?php phpinfo();?>             | data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8+                 |
| <?php readfile('index.php');?> | data://text/plain;base64,PD9waHAgcmVhZGZpbGUoJ2luZGV4LnBocCcpOz8+ |

** Remote Code Execution

*** The =preg_replace()= function :PHP:

This function allows to execute PHP code:

#+BEGIN_SRC php
preg_replace("/string/e", "phpinfo();", "une string");
#+END_SRC

** Type Juggling
*** PHP

In PHP, ==== is a loose comparison. For example :

#+BEGIN_SRC php :results output
print_("000" == int(0)); // TRUE
print_("0e12" == int(0)); // TRUE
print_("1abc" == int(1)); // TRUE
print_("abc" == int(0)); // TRUE !! Any string is equal to int(0)
#+END_SRC

#+RESULTS:


The function =strcmp= can be exploited too :

In the following example, we can use the fact that comparing a string to an array using the function =strcmp= returns =NULL=.

#+BEGIN_SRC php
$user_input = array();


if (!strcmp($user_input, "Password")) {
    echo "Authenticated !";
}
#+END_SRC

* Tools
** Zaproxy

Zaproxy is a software developped by the *OWASP* community. I allows the user to
intercept requests between the browser and the server.

** Hacktricks

https://book.hacktricks.xyz is a very usefull website full of ressources to
learn pentesting and priviledge escalation.
